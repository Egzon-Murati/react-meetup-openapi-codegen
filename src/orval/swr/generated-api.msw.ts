/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * JSON Placeholder API
 * See https://jsonplaceholder.typicode.com/
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';
import { HttpResponse, delay, http } from 'msw';
import type { Post, PostsList } from './generated-api.schemas';

export const getGetPostsResponseMock = (overrideResponse: any = {}): PostsList =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    completed: faker.word.sample(),
    id: faker.number.int({ min: undefined, max: undefined }),
    title: faker.word.sample(),
    userId: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  }));

export const getGetPostResponseMock = (overrideResponse: any = {}): Post => ({
  completed: faker.word.sample(),
  id: faker.number.int({ min: undefined, max: undefined }),
  title: faker.word.sample(),
  userId: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getGetPostsMockHandler = (overrideResponse?: PostsList) => {
  return http.get('*/posts', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(overrideResponse ? overrideResponse : getGetPostsResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getGetPostMockHandler = (overrideResponse?: Post) => {
  return http.get('*/posts/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(overrideResponse ? overrideResponse : getGetPostResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};
export const getJSONPlaceholderAPIMock = () => [getGetPostsMockHandler(), getGetPostMockHandler()];
