/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * API V1
 * OpenAPI spec version: v1
 */
import { faker } from '@faker-js/faker';
import { HttpResponse, delay, http } from 'msw';
import type {
  AuthToken,
  Comment,
  CommentList,
  Favorite,
  FavoriteList,
  Flower,
  FlowerList,
  Like,
  LikeList,
  Sighting,
  SightingList,
  User,
} from './generated-api.schemas';

export const getGetApiV1FlowersFavoritesResponseMock = (
  overrideResponse: any = {},
): FavoriteList => ({
  meta: faker.helpers.arrayElement([
    {
      current_page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      next_page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      prev_page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total_pages: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  sightings: faker.helpers.arrayElement([
    Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      flower: faker.helpers.arrayElement([
        {
          favorite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
          id: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          latin_name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          profile_picture: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          sightings: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      user_id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostApiV1FlowersFlowerIdFavoritesResponseMock = (
  overrideResponse: any = {},
): Favorite => ({
  flower: faker.helpers.arrayElement([
    {
      favorite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      latin_name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      profile_picture: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      sightings: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  id: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
  user_id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getDeleteApiV1FlowersFlowerIdFavoritesIdResponseMock = (
  overrideResponse: any = {},
): Favorite => ({
  flower: faker.helpers.arrayElement([
    {
      favorite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      latin_name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      profile_picture: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      sightings: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  id: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
  user_id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetApiV1FlowersIdSightingsResponseMock = (
  overrideResponse: any = {},
): SightingList => ({
  meta: faker.helpers.arrayElement([
    {
      current_page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      next_page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      prev_page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total_pages: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  sightings: faker.helpers.arrayElement([
    Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      description: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      flower_id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]),
        undefined,
      ]),
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      latitude: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]),
        undefined,
      ]),
      longitude: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]),
        undefined,
      ]),
      name: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetApiV1FlowersResponseMock = (overrideResponse: any = {}): FlowerList => ({
  flowers: faker.helpers.arrayElement([
    Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      favorite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      latin_name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      profile_picture: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      sightings: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  meta: faker.helpers.arrayElement([
    {
      current_page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      next_page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      prev_page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total_pages: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostApiV1FlowersResponseMock = (overrideResponse: any = {}): Flower => ({
  favorite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  id: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
  latin_name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  profile_picture: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  sightings: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetApiV1FlowersRandomResponseMock = (overrideResponse: any = {}): FlowerList => ({
  flowers: faker.helpers.arrayElement([
    Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      favorite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      latin_name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      profile_picture: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      sightings: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  meta: faker.helpers.arrayElement([
    {
      current_page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      next_page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      prev_page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total_pages: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetApiV1FlowersSearchResponseMock = (overrideResponse: any = {}): FlowerList => ({
  flowers: faker.helpers.arrayElement([
    Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      favorite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      latin_name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      profile_picture: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      sightings: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  meta: faker.helpers.arrayElement([
    {
      current_page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      next_page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      prev_page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total_pages: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetApiV1FlowersIdResponseMock = (overrideResponse: any = {}): Flower => ({
  favorite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  id: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
  latin_name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  profile_picture: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  sightings: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostApiV1UsersRegisterResponseMock = (overrideResponse: any = {}): AuthToken => ({
  auth_token: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getPostApiV1UsersLoginResponseMock = (overrideResponse: any = {}): AuthToken => ({
  auth_token: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getDeleteApiV1SightingsSightingIdCommentsIdResponseMock = (
  overrideResponse: any = {},
): Comment => ({
  content: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  id: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
  sighting_id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  user_full_name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  user_id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetApiV1SightingsSightingIdCommentsResponseMock = (
  overrideResponse: any = {},
): CommentList => ({
  comments: faker.helpers.arrayElement([
    Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      content: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      sighting_id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      user_full_name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      user_id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  meta: faker.helpers.arrayElement([
    {
      current_page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      next_page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      prev_page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total_pages: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostApiV1SightingsSightingIdCommentsResponseMock = (
  overrideResponse: any = {},
): Comment => ({
  content: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  id: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
  sighting_id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  user_full_name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  user_id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getDeleteApiV1SightingsSightingIdLikesResponseMock = (
  overrideResponse: any = {},
): Like => ({
  id: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
  sighting_id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  user_full_name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  user_id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetApiV1SightingsSightingIdLikesResponseMock = (
  overrideResponse: any = {},
): LikeList => ({
  likes: faker.helpers.arrayElement([
    Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      sighting_id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      user_full_name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      user_id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  meta: faker.helpers.arrayElement([
    {
      current_page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      next_page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      prev_page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total_pages: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostApiV1SightingsSightingIdLikesResponseMock = (
  overrideResponse: any = {},
): Like => ({
  id: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
  sighting_id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  user_full_name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  user_id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetApiV1SightingsResponseMock = (overrideResponse: any = {}): SightingList => ({
  meta: faker.helpers.arrayElement([
    {
      current_page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      next_page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      prev_page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total_pages: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  sightings: faker.helpers.arrayElement([
    Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      description: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      flower_id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]),
        undefined,
      ]),
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      latitude: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]),
        undefined,
      ]),
      longitude: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]),
        undefined,
      ]),
      name: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostApiV1SightingsResponseMock = (overrideResponse: any = {}): Sighting => ({
  description: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  flower_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]),
    undefined,
  ]),
  id: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
  latitude: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]),
    undefined,
  ]),
  longitude: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]),
    undefined,
  ]),
  name: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetApiV1SightingsIdResponseMock = (overrideResponse: any = {}): Sighting => ({
  description: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  flower_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]),
    undefined,
  ]),
  id: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
  latitude: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]),
    undefined,
  ]),
  longitude: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]),
    undefined,
  ]),
  name: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPutApiV1SightingsIdResponseMock = (overrideResponse: any = {}): Sighting => ({
  description: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  flower_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]),
    undefined,
  ]),
  id: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
  latitude: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]),
    undefined,
  ]),
  longitude: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]),
    undefined,
  ]),
  name: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getDeleteApiV1SightingsIdResponseMock = (overrideResponse: any = {}): Sighting => ({
  description: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  flower_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]),
    undefined,
  ]),
  id: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
  latitude: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]),
    undefined,
  ]),
  longitude: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]),
    undefined,
  ]),
  name: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetApiV1UsersIdSightingsResponseMock = (
  overrideResponse: any = {},
): SightingList => ({
  meta: faker.helpers.arrayElement([
    {
      current_page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      next_page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      prev_page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total_pages: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  sightings: faker.helpers.arrayElement([
    Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      description: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      flower_id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]),
        undefined,
      ]),
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      latitude: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]),
        undefined,
      ]),
      longitude: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]),
        undefined,
      ]),
      name: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetApiV1UsersMeResponseMock = (overrideResponse: any = {}): User => ({
  user: faker.helpers.arrayElement([
    {
      first_name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      last_name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getPutApiV1UsersMeResponseMock = (overrideResponse: any = {}): User => ({
  user: faker.helpers.arrayElement([
    {
      first_name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      last_name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetApiV1UsersMeRefreshResponseMock = (overrideResponse: any = {}): AuthToken => ({
  auth_token: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getGetApiV1UsersIdResponseMock = (overrideResponse: any = {}): User => ({
  user: faker.helpers.arrayElement([
    {
      first_name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      last_name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetApiV1FlowersFavoritesMockHandler = (overrideResponse?: FavoriteList) => {
  return http.get('*/api/v1/flowers/favorites', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetApiV1FlowersFavoritesResponseMock(),
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getPostApiV1FlowersFlowerIdFavoritesMockHandler = (overrideResponse?: Favorite) => {
  return http.post('*/api/v1/flowers/:flowerId/favorites', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getPostApiV1FlowersFlowerIdFavoritesResponseMock(),
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getDeleteApiV1FlowersFlowerIdFavoritesIdMockHandler = (
  overrideResponse?: Favorite,
) => {
  return http.delete('*/api/v1/flowers/:flowerId/favorites/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getDeleteApiV1FlowersFlowerIdFavoritesIdResponseMock(),
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getGetApiV1FlowersIdSightingsMockHandler = (overrideResponse?: SightingList) => {
  return http.get('*/api/v1/flowers/:id/sightings', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetApiV1FlowersIdSightingsResponseMock(),
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getGetApiV1FlowersMockHandler = (overrideResponse?: FlowerList) => {
  return http.get('*/api/v1/flowers', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(overrideResponse ? overrideResponse : getGetApiV1FlowersResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getPostApiV1FlowersMockHandler = (overrideResponse?: Flower) => {
  return http.post('*/api/v1/flowers', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(overrideResponse ? overrideResponse : getPostApiV1FlowersResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getGetApiV1FlowersRandomMockHandler = (overrideResponse?: FlowerList) => {
  return http.get('*/api/v1/flowers/random', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(overrideResponse ? overrideResponse : getGetApiV1FlowersRandomResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getGetApiV1FlowersSearchMockHandler = (overrideResponse?: FlowerList) => {
  return http.get('*/api/v1/flowers/search', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(overrideResponse ? overrideResponse : getGetApiV1FlowersSearchResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getGetApiV1FlowersIdMockHandler = (overrideResponse?: Flower) => {
  return http.get('*/api/v1/flowers/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(overrideResponse ? overrideResponse : getGetApiV1FlowersIdResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getPostApiV1UsersRegisterMockHandler = (overrideResponse?: AuthToken) => {
  return http.post('*/api/v1/users/register', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(overrideResponse ? overrideResponse : getPostApiV1UsersRegisterResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getPostApiV1UsersLoginMockHandler = (overrideResponse?: AuthToken) => {
  return http.post('*/api/v1/users/login', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(overrideResponse ? overrideResponse : getPostApiV1UsersLoginResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getDeleteApiV1SightingsSightingIdCommentsIdMockHandler = (
  overrideResponse?: Comment,
) => {
  return http.delete('*/api/v1/sightings/:sightingId/comments/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getDeleteApiV1SightingsSightingIdCommentsIdResponseMock(),
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getGetApiV1SightingsSightingIdCommentsMockHandler = (
  overrideResponse?: CommentList,
) => {
  return http.get('*/api/v1/sightings/:sightingId/comments', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetApiV1SightingsSightingIdCommentsResponseMock(),
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getPostApiV1SightingsSightingIdCommentsMockHandler = (overrideResponse?: Comment) => {
  return http.post('*/api/v1/sightings/:sightingId/comments', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getPostApiV1SightingsSightingIdCommentsResponseMock(),
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getDeleteApiV1SightingsSightingIdLikesMockHandler = (overrideResponse?: Like) => {
  return http.delete('*/api/v1/sightings/:sightingId/likes', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getDeleteApiV1SightingsSightingIdLikesResponseMock(),
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getGetApiV1SightingsSightingIdLikesMockHandler = (overrideResponse?: LikeList) => {
  return http.get('*/api/v1/sightings/:sightingId/likes', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetApiV1SightingsSightingIdLikesResponseMock(),
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getPostApiV1SightingsSightingIdLikesMockHandler = (overrideResponse?: Like) => {
  return http.post('*/api/v1/sightings/:sightingId/likes', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getPostApiV1SightingsSightingIdLikesResponseMock(),
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getGetApiV1SightingsMockHandler = (overrideResponse?: SightingList) => {
  return http.get('*/api/v1/sightings', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(overrideResponse ? overrideResponse : getGetApiV1SightingsResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getPostApiV1SightingsMockHandler = (overrideResponse?: Sighting) => {
  return http.post('*/api/v1/sightings', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(overrideResponse ? overrideResponse : getPostApiV1SightingsResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getGetApiV1SightingsIdMockHandler = (overrideResponse?: Sighting) => {
  return http.get('*/api/v1/sightings/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(overrideResponse ? overrideResponse : getGetApiV1SightingsIdResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getPutApiV1SightingsIdMockHandler = (overrideResponse?: Sighting) => {
  return http.put('*/api/v1/sightings/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(overrideResponse ? overrideResponse : getPutApiV1SightingsIdResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getDeleteApiV1SightingsIdMockHandler = (overrideResponse?: Sighting) => {
  return http.delete('*/api/v1/sightings/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(overrideResponse ? overrideResponse : getDeleteApiV1SightingsIdResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getGetApiV1UsersIdSightingsMockHandler = (overrideResponse?: SightingList) => {
  return http.get('*/api/v1/users/:id/sightings', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetApiV1UsersIdSightingsResponseMock(),
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getGetApiV1UsersMeMockHandler = (overrideResponse?: User) => {
  return http.get('*/api/v1/users/me', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(overrideResponse ? overrideResponse : getGetApiV1UsersMeResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getPutApiV1UsersMeMockHandler = (overrideResponse?: User) => {
  return http.put('*/api/v1/users/me', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(overrideResponse ? overrideResponse : getPutApiV1UsersMeResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getGetApiV1UsersMeRefreshMockHandler = (overrideResponse?: AuthToken) => {
  return http.get('*/api/v1/users/me/refresh', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(overrideResponse ? overrideResponse : getGetApiV1UsersMeRefreshResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getGetApiV1UsersIdMockHandler = (overrideResponse?: User) => {
  return http.get('*/api/v1/users/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(overrideResponse ? overrideResponse : getGetApiV1UsersIdResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};
export const getApiV1Mock = () => [
  getGetApiV1FlowersFavoritesMockHandler(),
  getPostApiV1FlowersFlowerIdFavoritesMockHandler(),
  getDeleteApiV1FlowersFlowerIdFavoritesIdMockHandler(),
  getGetApiV1FlowersIdSightingsMockHandler(),
  getGetApiV1FlowersMockHandler(),
  getPostApiV1FlowersMockHandler(),
  getGetApiV1FlowersRandomMockHandler(),
  getGetApiV1FlowersSearchMockHandler(),
  getGetApiV1FlowersIdMockHandler(),
  getPostApiV1UsersRegisterMockHandler(),
  getPostApiV1UsersLoginMockHandler(),
  getDeleteApiV1SightingsSightingIdCommentsIdMockHandler(),
  getGetApiV1SightingsSightingIdCommentsMockHandler(),
  getPostApiV1SightingsSightingIdCommentsMockHandler(),
  getDeleteApiV1SightingsSightingIdLikesMockHandler(),
  getGetApiV1SightingsSightingIdLikesMockHandler(),
  getPostApiV1SightingsSightingIdLikesMockHandler(),
  getGetApiV1SightingsMockHandler(),
  getPostApiV1SightingsMockHandler(),
  getGetApiV1SightingsIdMockHandler(),
  getPutApiV1SightingsIdMockHandler(),
  getDeleteApiV1SightingsIdMockHandler(),
  getGetApiV1UsersIdSightingsMockHandler(),
  getGetApiV1UsersMeMockHandler(),
  getPutApiV1UsersMeMockHandler(),
  getGetApiV1UsersMeRefreshMockHandler(),
  getGetApiV1UsersIdMockHandler(),
];
