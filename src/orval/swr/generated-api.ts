/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * API V1
 * OpenAPI spec version: v1
 */
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import * as axios from 'axios';
import type { Arguments, Key, SWRConfiguration } from 'swr';
import useSwr from 'swr';
import type { SWRMutationConfiguration } from 'swr/mutation';
import useSWRMutation from 'swr/mutation';
import type {
  AuthToken,
  AuthTokenError,
  Comment,
  CommentList,
  Favorite,
  FavoriteList,
  Flower,
  FlowerList,
  GetApiV1FlowersFavoritesParams,
  GetApiV1FlowersParams,
  GetApiV1FlowersRandomParams,
  GetApiV1FlowersSearchParams,
  GetApiV1SightingsParams,
  GetApiV1SightingsSightingIdCommentsParams,
  GetApiV1SightingsSightingIdLikesParams,
  Like,
  LikeList,
  PostApiV1FlowersBody,
  PostApiV1SightingsBody,
  PostApiV1SightingsSightingIdCommentsBody,
  PostApiV1UsersLoginBody,
  PostApiV1UsersRegisterBody,
  PutApiV1SightingsIdBody,
  PutApiV1UsersMeBody,
  Sighting,
  SightingList,
  User,
} from './generated-api.schemas';

/**
 * @summary shows my favorite flovers
 */
export const getApiV1FlowersFavorites = (
  params?: GetApiV1FlowersFavoritesParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<FavoriteList>> => {
  return axios.default.get(`https://flowrspot-api.herokuapp.com/api/v1/flowers/favorites`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetApiV1FlowersFavoritesKey = (params?: GetApiV1FlowersFavoritesParams) =>
  [
    `https://flowrspot-api.herokuapp.com/api/v1/flowers/favorites`,
    ...(params ? [params] : []),
  ] as const;

export type GetApiV1FlowersFavoritesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1FlowersFavorites>>
>;
export type GetApiV1FlowersFavoritesQueryError = AxiosError<unknown>;

/**
 * @summary shows my favorite flovers
 */
export const useGetApiV1FlowersFavorites = <TError = AxiosError<unknown>>(
  params?: GetApiV1FlowersFavoritesParams,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getApiV1FlowersFavorites>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetApiV1FlowersFavoritesKey(params) : null));
  const swrFn = () => getApiV1FlowersFavorites(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, {
    ...swrOptions,
  });

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary mark that flower as my favorite
 */
export const postApiV1FlowersFlowerIdFavorites = (
  flowerId: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Favorite>> => {
  return axios.default.post(
    `https://flowrspot-api.herokuapp.com/api/v1/flowers/${flowerId}/favorites`,
    undefined,
    options,
  );
};

export const getPostApiV1FlowersFlowerIdFavoritesMutationFetcher = (
  flowerId: number,
  options?: AxiosRequestConfig,
) => {
  return (_: string, { arg }: { arg: Arguments }): Promise<AxiosResponse<Favorite>> => {
    return postApiV1FlowersFlowerIdFavorites(flowerId, options);
  };
};
export const getPostApiV1FlowersFlowerIdFavoritesMutationKey = (flowerId: number) =>
  `https://flowrspot-api.herokuapp.com/api/v1/flowers/${flowerId}/favorites` as const;

export type PostApiV1FlowersFlowerIdFavoritesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1FlowersFlowerIdFavorites>>
>;
export type PostApiV1FlowersFlowerIdFavoritesMutationError = AxiosError<unknown>;

/**
 * @summary mark that flower as my favorite
 */
export const usePostApiV1FlowersFlowerIdFavorites = <TError = AxiosError<unknown>>(
  flowerId: number,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof postApiV1FlowersFlowerIdFavorites>>,
      TError,
      string,
      Arguments,
      Awaited<ReturnType<typeof postApiV1FlowersFlowerIdFavorites>>
    > & { swrKey?: string };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getPostApiV1FlowersFlowerIdFavoritesMutationKey(flowerId);
  const swrFn = getPostApiV1FlowersFlowerIdFavoritesMutationFetcher(flowerId, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary remove that flower from my favorites
 */
export const deleteApiV1FlowersFlowerIdFavoritesId = (
  flowerId: number,
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Favorite>> => {
  return axios.default.delete(
    `https://flowrspot-api.herokuapp.com/api/v1/flowers/${flowerId}/favorites/${id}`,
    options,
  );
};

export const getDeleteApiV1FlowersFlowerIdFavoritesIdMutationFetcher = (
  flowerId: number,
  id: number,
  options?: AxiosRequestConfig,
) => {
  return (_: string, { arg }: { arg: Arguments }): Promise<AxiosResponse<Favorite>> => {
    return deleteApiV1FlowersFlowerIdFavoritesId(flowerId, id, options);
  };
};
export const getDeleteApiV1FlowersFlowerIdFavoritesIdMutationKey = (flowerId: number, id: number) =>
  `https://flowrspot-api.herokuapp.com/api/v1/flowers/${flowerId}/favorites/${id}` as const;

export type DeleteApiV1FlowersFlowerIdFavoritesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1FlowersFlowerIdFavoritesId>>
>;
export type DeleteApiV1FlowersFlowerIdFavoritesIdMutationError = AxiosError<unknown>;

/**
 * @summary remove that flower from my favorites
 */
export const useDeleteApiV1FlowersFlowerIdFavoritesId = <TError = AxiosError<unknown>>(
  flowerId: number,
  id: number,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof deleteApiV1FlowersFlowerIdFavoritesId>>,
      TError,
      string,
      Arguments,
      Awaited<ReturnType<typeof deleteApiV1FlowersFlowerIdFavoritesId>>
    > & { swrKey?: string };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const swrKey =
    swrOptions?.swrKey ?? getDeleteApiV1FlowersFlowerIdFavoritesIdMutationKey(flowerId, id);
  const swrFn = getDeleteApiV1FlowersFlowerIdFavoritesIdMutationFetcher(flowerId, id, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary flower sightings
 */
export const getApiV1FlowersIdSightings = (
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<SightingList>> => {
  return axios.default.get(
    `https://flowrspot-api.herokuapp.com/api/v1/flowers/${id}/sightings`,
    options,
  );
};

export const getGetApiV1FlowersIdSightingsKey = (id: number) =>
  [`https://flowrspot-api.herokuapp.com/api/v1/flowers/${id}/sightings`] as const;

export type GetApiV1FlowersIdSightingsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1FlowersIdSightings>>
>;
export type GetApiV1FlowersIdSightingsQueryError = AxiosError<unknown>;

/**
 * @summary flower sightings
 */
export const useGetApiV1FlowersIdSightings = <TError = AxiosError<unknown>>(
  id: number,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getApiV1FlowersIdSightings>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!id;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetApiV1FlowersIdSightingsKey(id) : null));
  const swrFn = () => getApiV1FlowersIdSightings(id, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, {
    ...swrOptions,
  });

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary List flowers
 */
export const getApiV1Flowers = (
  params?: GetApiV1FlowersParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<FlowerList>> => {
  return axios.default.get(`https://flowrspot-api.herokuapp.com/api/v1/flowers`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetApiV1FlowersKey = (params?: GetApiV1FlowersParams) =>
  [`https://flowrspot-api.herokuapp.com/api/v1/flowers`, ...(params ? [params] : [])] as const;

export type GetApiV1FlowersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Flowers>>>;
export type GetApiV1FlowersQueryError = AxiosError<unknown>;

/**
 * @summary List flowers
 */
export const useGetApiV1Flowers = <TError = AxiosError<unknown>>(
  params?: GetApiV1FlowersParams,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getApiV1Flowers>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetApiV1FlowersKey(params) : null));
  const swrFn = () => getApiV1Flowers(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, {
    ...swrOptions,
  });

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary Create flower
 */
export const postApiV1Flowers = (
  postApiV1FlowersBody: PostApiV1FlowersBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Flower>> => {
  const formData = new FormData();
  if (postApiV1FlowersBody.name !== undefined) {
    formData.append('name', postApiV1FlowersBody.name);
  }
  if (postApiV1FlowersBody.latin_name !== undefined) {
    formData.append('latin_name', postApiV1FlowersBody.latin_name);
  }
  if (postApiV1FlowersBody.description !== undefined) {
    formData.append('description', postApiV1FlowersBody.description);
  }
  if (postApiV1FlowersBody.features !== undefined) {
    formData.append('features', postApiV1FlowersBody.features);
  }
  if (postApiV1FlowersBody.profile_picture !== undefined) {
    formData.append('profile_picture', postApiV1FlowersBody.profile_picture);
  }

  return axios.default.post(
    `https://flowrspot-api.herokuapp.com/api/v1/flowers`,
    formData,
    options,
  );
};

export const getPostApiV1FlowersMutationFetcher = (options?: AxiosRequestConfig) => {
  return (_: string, { arg }: { arg: Arguments }): Promise<AxiosResponse<Flower>> => {
    return postApiV1Flowers(arg as PostApiV1FlowersBody, options);
  };
};
export const getPostApiV1FlowersMutationKey = () =>
  `https://flowrspot-api.herokuapp.com/api/v1/flowers` as const;

export type PostApiV1FlowersMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Flowers>>
>;
export type PostApiV1FlowersMutationError = AxiosError<unknown>;

/**
 * @summary Create flower
 */
export const usePostApiV1Flowers = <TError = AxiosError<unknown>>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof postApiV1Flowers>>,
    TError,
    string,
    Arguments,
    Awaited<ReturnType<typeof postApiV1Flowers>>
  > & { swrKey?: string };
  axios?: AxiosRequestConfig;
}) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getPostApiV1FlowersMutationKey();
  const swrFn = getPostApiV1FlowersMutationFetcher(axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary List of random flowers
 */
export const getApiV1FlowersRandom = (
  params?: GetApiV1FlowersRandomParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<FlowerList>> => {
  return axios.default.get(`https://flowrspot-api.herokuapp.com/api/v1/flowers/random`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetApiV1FlowersRandomKey = (params?: GetApiV1FlowersRandomParams) =>
  [
    `https://flowrspot-api.herokuapp.com/api/v1/flowers/random`,
    ...(params ? [params] : []),
  ] as const;

export type GetApiV1FlowersRandomQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1FlowersRandom>>
>;
export type GetApiV1FlowersRandomQueryError = AxiosError<unknown>;

/**
 * @summary List of random flowers
 */
export const useGetApiV1FlowersRandom = <TError = AxiosError<unknown>>(
  params?: GetApiV1FlowersRandomParams,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getApiV1FlowersRandom>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetApiV1FlowersRandomKey(params) : null));
  const swrFn = () => getApiV1FlowersRandom(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, {
    ...swrOptions,
  });

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary Flowers matching search results
 */
export const getApiV1FlowersSearch = (
  params: GetApiV1FlowersSearchParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<FlowerList>> => {
  return axios.default.get(`https://flowrspot-api.herokuapp.com/api/v1/flowers/search`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetApiV1FlowersSearchKey = (params: GetApiV1FlowersSearchParams) =>
  [
    `https://flowrspot-api.herokuapp.com/api/v1/flowers/search`,
    ...(params ? [params] : []),
  ] as const;

export type GetApiV1FlowersSearchQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1FlowersSearch>>
>;
export type GetApiV1FlowersSearchQueryError = AxiosError<unknown>;

/**
 * @summary Flowers matching search results
 */
export const useGetApiV1FlowersSearch = <TError = AxiosError<unknown>>(
  params: GetApiV1FlowersSearchParams,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getApiV1FlowersSearch>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetApiV1FlowersSearchKey(params) : null));
  const swrFn = () => getApiV1FlowersSearch(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, {
    ...swrOptions,
  });

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary Flower detail
 */
export const getApiV1FlowersId = (
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Flower>> => {
  return axios.default.get(`https://flowrspot-api.herokuapp.com/api/v1/flowers/${id}`, options);
};

export const getGetApiV1FlowersIdKey = (id: number) =>
  [`https://flowrspot-api.herokuapp.com/api/v1/flowers/${id}`] as const;

export type GetApiV1FlowersIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1FlowersId>>
>;
export type GetApiV1FlowersIdQueryError = AxiosError<unknown>;

/**
 * @summary Flower detail
 */
export const useGetApiV1FlowersId = <TError = AxiosError<unknown>>(
  id: number,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getApiV1FlowersId>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!id;
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetApiV1FlowersIdKey(id) : null));
  const swrFn = () => getApiV1FlowersId(id, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, {
    ...swrOptions,
  });

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary register user and get token back
 */
export const postApiV1UsersRegister = (
  postApiV1UsersRegisterBody: PostApiV1UsersRegisterBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<AuthToken>> => {
  return axios.default.post(
    `https://flowrspot-api.herokuapp.com/api/v1/users/register`,
    postApiV1UsersRegisterBody,
    options,
  );
};

export const getPostApiV1UsersRegisterMutationFetcher = (options?: AxiosRequestConfig) => {
  return (_: string, { arg }: { arg: Arguments }): Promise<AxiosResponse<AuthToken>> => {
    return postApiV1UsersRegister(arg as PostApiV1UsersRegisterBody, options);
  };
};
export const getPostApiV1UsersRegisterMutationKey = () =>
  `https://flowrspot-api.herokuapp.com/api/v1/users/register` as const;

export type PostApiV1UsersRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1UsersRegister>>
>;
export type PostApiV1UsersRegisterMutationError = AxiosError<AuthTokenError>;

/**
 * @summary register user and get token back
 */
export const usePostApiV1UsersRegister = <TError = AxiosError<AuthTokenError>>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof postApiV1UsersRegister>>,
    TError,
    string,
    Arguments,
    Awaited<ReturnType<typeof postApiV1UsersRegister>>
  > & { swrKey?: string };
  axios?: AxiosRequestConfig;
}) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getPostApiV1UsersRegisterMutationKey();
  const swrFn = getPostApiV1UsersRegisterMutationFetcher(axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary login user and get token back
 */
export const postApiV1UsersLogin = (
  postApiV1UsersLoginBody: PostApiV1UsersLoginBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<AuthToken>> => {
  return axios.default.post(
    `https://flowrspot-api.herokuapp.com/api/v1/users/login`,
    postApiV1UsersLoginBody,
    options,
  );
};

export const getPostApiV1UsersLoginMutationFetcher = (options?: AxiosRequestConfig) => {
  return (_: string, { arg }: { arg: Arguments }): Promise<AxiosResponse<AuthToken>> => {
    return postApiV1UsersLogin(arg as PostApiV1UsersLoginBody, options);
  };
};
export const getPostApiV1UsersLoginMutationKey = () =>
  `https://flowrspot-api.herokuapp.com/api/v1/users/login` as const;

export type PostApiV1UsersLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1UsersLogin>>
>;
export type PostApiV1UsersLoginMutationError = AxiosError<AuthTokenError>;

/**
 * @summary login user and get token back
 */
export const usePostApiV1UsersLogin = <TError = AxiosError<AuthTokenError>>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof postApiV1UsersLogin>>,
    TError,
    string,
    Arguments,
    Awaited<ReturnType<typeof postApiV1UsersLogin>>
  > & { swrKey?: string };
  axios?: AxiosRequestConfig;
}) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getPostApiV1UsersLoginMutationKey();
  const swrFn = getPostApiV1UsersLoginMutationFetcher(axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary remove the comment
 */
export const deleteApiV1SightingsSightingIdCommentsId = (
  sightingId: number,
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Comment>> => {
  return axios.default.delete(
    `https://flowrspot-api.herokuapp.com/api/v1/sightings/${sightingId}/comments/${id}`,
    options,
  );
};

export const getDeleteApiV1SightingsSightingIdCommentsIdMutationFetcher = (
  sightingId: number,
  id: number,
  options?: AxiosRequestConfig,
) => {
  return (_: string, { arg }: { arg: Arguments }): Promise<AxiosResponse<Comment>> => {
    return deleteApiV1SightingsSightingIdCommentsId(sightingId, id, options);
  };
};
export const getDeleteApiV1SightingsSightingIdCommentsIdMutationKey = (
  sightingId: number,
  id: number,
) => `https://flowrspot-api.herokuapp.com/api/v1/sightings/${sightingId}/comments/${id}` as const;

export type DeleteApiV1SightingsSightingIdCommentsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1SightingsSightingIdCommentsId>>
>;
export type DeleteApiV1SightingsSightingIdCommentsIdMutationError = AxiosError<unknown>;

/**
 * @summary remove the comment
 */
export const useDeleteApiV1SightingsSightingIdCommentsId = <TError = AxiosError<unknown>>(
  sightingId: number,
  id: number,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof deleteApiV1SightingsSightingIdCommentsId>>,
      TError,
      string,
      Arguments,
      Awaited<ReturnType<typeof deleteApiV1SightingsSightingIdCommentsId>>
    > & { swrKey?: string };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const swrKey =
    swrOptions?.swrKey ?? getDeleteApiV1SightingsSightingIdCommentsIdMutationKey(sightingId, id);
  const swrFn = getDeleteApiV1SightingsSightingIdCommentsIdMutationFetcher(
    sightingId,
    id,
    axiosOptions,
  );

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary get comments
 */
export const getApiV1SightingsSightingIdComments = (
  sightingId: number,
  params?: GetApiV1SightingsSightingIdCommentsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<CommentList>> => {
  return axios.default.get(
    `https://flowrspot-api.herokuapp.com/api/v1/sightings/${sightingId}/comments`,
    {
      ...options,
      params: { ...params, ...options?.params },
    },
  );
};

export const getGetApiV1SightingsSightingIdCommentsKey = (
  sightingId: number,
  params?: GetApiV1SightingsSightingIdCommentsParams,
) =>
  [
    `https://flowrspot-api.herokuapp.com/api/v1/sightings/${sightingId}/comments`,
    ...(params ? [params] : []),
  ] as const;

export type GetApiV1SightingsSightingIdCommentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1SightingsSightingIdComments>>
>;
export type GetApiV1SightingsSightingIdCommentsQueryError = AxiosError<unknown>;

/**
 * @summary get comments
 */
export const useGetApiV1SightingsSightingIdComments = <TError = AxiosError<unknown>>(
  sightingId: number,
  params?: GetApiV1SightingsSightingIdCommentsParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getApiV1SightingsSightingIdComments>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!sightingId;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetApiV1SightingsSightingIdCommentsKey(sightingId, params) : null));
  const swrFn = () => getApiV1SightingsSightingIdComments(sightingId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, {
    ...swrOptions,
  });

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary create a comment
 */
export const postApiV1SightingsSightingIdComments = (
  sightingId: number,
  postApiV1SightingsSightingIdCommentsBody: PostApiV1SightingsSightingIdCommentsBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Comment>> => {
  return axios.default.post(
    `https://flowrspot-api.herokuapp.com/api/v1/sightings/${sightingId}/comments`,
    postApiV1SightingsSightingIdCommentsBody,
    options,
  );
};

export const getPostApiV1SightingsSightingIdCommentsMutationFetcher = (
  sightingId: number,
  options?: AxiosRequestConfig,
) => {
  return (_: string, { arg }: { arg: Arguments }): Promise<AxiosResponse<Comment>> => {
    return postApiV1SightingsSightingIdComments(
      sightingId,
      arg as PostApiV1SightingsSightingIdCommentsBody,
      options,
    );
  };
};
export const getPostApiV1SightingsSightingIdCommentsMutationKey = (sightingId: number) =>
  `https://flowrspot-api.herokuapp.com/api/v1/sightings/${sightingId}/comments` as const;

export type PostApiV1SightingsSightingIdCommentsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1SightingsSightingIdComments>>
>;
export type PostApiV1SightingsSightingIdCommentsMutationError = AxiosError<unknown>;

/**
 * @summary create a comment
 */
export const usePostApiV1SightingsSightingIdComments = <TError = AxiosError<unknown>>(
  sightingId: number,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof postApiV1SightingsSightingIdComments>>,
      TError,
      string,
      Arguments,
      Awaited<ReturnType<typeof postApiV1SightingsSightingIdComments>>
    > & { swrKey?: string };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const swrKey =
    swrOptions?.swrKey ?? getPostApiV1SightingsSightingIdCommentsMutationKey(sightingId);
  const swrFn = getPostApiV1SightingsSightingIdCommentsMutationFetcher(sightingId, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary remove the like
 */
export const deleteApiV1SightingsSightingIdLikes = (
  sightingId: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Like>> => {
  return axios.default.delete(
    `https://flowrspot-api.herokuapp.com/api/v1/sightings/${sightingId}/likes`,
    options,
  );
};

export const getDeleteApiV1SightingsSightingIdLikesMutationFetcher = (
  sightingId: number,
  options?: AxiosRequestConfig,
) => {
  return (_: string, { arg }: { arg: Arguments }): Promise<AxiosResponse<Like>> => {
    return deleteApiV1SightingsSightingIdLikes(sightingId, options);
  };
};
export const getDeleteApiV1SightingsSightingIdLikesMutationKey = (sightingId: number) =>
  `https://flowrspot-api.herokuapp.com/api/v1/sightings/${sightingId}/likes` as const;

export type DeleteApiV1SightingsSightingIdLikesMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1SightingsSightingIdLikes>>
>;
export type DeleteApiV1SightingsSightingIdLikesMutationError = AxiosError<unknown>;

/**
 * @summary remove the like
 */
export const useDeleteApiV1SightingsSightingIdLikes = <TError = AxiosError<unknown>>(
  sightingId: number,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof deleteApiV1SightingsSightingIdLikes>>,
      TError,
      string,
      Arguments,
      Awaited<ReturnType<typeof deleteApiV1SightingsSightingIdLikes>>
    > & { swrKey?: string };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const swrKey =
    swrOptions?.swrKey ?? getDeleteApiV1SightingsSightingIdLikesMutationKey(sightingId);
  const swrFn = getDeleteApiV1SightingsSightingIdLikesMutationFetcher(sightingId, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary get likes
 */
export const getApiV1SightingsSightingIdLikes = (
  sightingId: number,
  params?: GetApiV1SightingsSightingIdLikesParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<LikeList>> => {
  return axios.default.get(
    `https://flowrspot-api.herokuapp.com/api/v1/sightings/${sightingId}/likes`,
    {
      ...options,
      params: { ...params, ...options?.params },
    },
  );
};

export const getGetApiV1SightingsSightingIdLikesKey = (
  sightingId: number,
  params?: GetApiV1SightingsSightingIdLikesParams,
) =>
  [
    `https://flowrspot-api.herokuapp.com/api/v1/sightings/${sightingId}/likes`,
    ...(params ? [params] : []),
  ] as const;

export type GetApiV1SightingsSightingIdLikesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1SightingsSightingIdLikes>>
>;
export type GetApiV1SightingsSightingIdLikesQueryError = AxiosError<unknown>;

/**
 * @summary get likes
 */
export const useGetApiV1SightingsSightingIdLikes = <TError = AxiosError<unknown>>(
  sightingId: number,
  params?: GetApiV1SightingsSightingIdLikesParams,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getApiV1SightingsSightingIdLikes>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!sightingId;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetApiV1SightingsSightingIdLikesKey(sightingId, params) : null));
  const swrFn = () => getApiV1SightingsSightingIdLikes(sightingId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, {
    ...swrOptions,
  });

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary create a like
 */
export const postApiV1SightingsSightingIdLikes = (
  sightingId: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Like>> => {
  return axios.default.post(
    `https://flowrspot-api.herokuapp.com/api/v1/sightings/${sightingId}/likes`,
    undefined,
    options,
  );
};

export const getPostApiV1SightingsSightingIdLikesMutationFetcher = (
  sightingId: number,
  options?: AxiosRequestConfig,
) => {
  return (_: string, { arg }: { arg: Arguments }): Promise<AxiosResponse<Like>> => {
    return postApiV1SightingsSightingIdLikes(sightingId, options);
  };
};
export const getPostApiV1SightingsSightingIdLikesMutationKey = (sightingId: number) =>
  `https://flowrspot-api.herokuapp.com/api/v1/sightings/${sightingId}/likes` as const;

export type PostApiV1SightingsSightingIdLikesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1SightingsSightingIdLikes>>
>;
export type PostApiV1SightingsSightingIdLikesMutationError = AxiosError<unknown>;

/**
 * @summary create a like
 */
export const usePostApiV1SightingsSightingIdLikes = <TError = AxiosError<unknown>>(
  sightingId: number,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof postApiV1SightingsSightingIdLikes>>,
      TError,
      string,
      Arguments,
      Awaited<ReturnType<typeof postApiV1SightingsSightingIdLikes>>
    > & { swrKey?: string };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getPostApiV1SightingsSightingIdLikesMutationKey(sightingId);
  const swrFn = getPostApiV1SightingsSightingIdLikesMutationFetcher(sightingId, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary sightings
 */
export const getApiV1Sightings = (
  params?: GetApiV1SightingsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<SightingList>> => {
  return axios.default.get(`https://flowrspot-api.herokuapp.com/api/v1/sightings`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetApiV1SightingsKey = (params?: GetApiV1SightingsParams) =>
  [`https://flowrspot-api.herokuapp.com/api/v1/sightings`, ...(params ? [params] : [])] as const;

export type GetApiV1SightingsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Sightings>>
>;
export type GetApiV1SightingsQueryError = AxiosError<unknown>;

/**
 * @summary sightings
 */
export const useGetApiV1Sightings = <TError = AxiosError<unknown>>(
  params?: GetApiV1SightingsParams,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getApiV1Sightings>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetApiV1SightingsKey(params) : null));
  const swrFn = () => getApiV1Sightings(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, {
    ...swrOptions,
  });

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary create sighting
 */
export const postApiV1Sightings = (
  postApiV1SightingsBody: PostApiV1SightingsBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Sighting>> => {
  const formData = new FormData();
  if (postApiV1SightingsBody.flower_id !== undefined) {
    formData.append('flower_id', postApiV1SightingsBody.flower_id.toString());
  }
  if (postApiV1SightingsBody.name !== undefined) {
    formData.append('name', postApiV1SightingsBody.name);
  }
  if (postApiV1SightingsBody.description !== undefined) {
    formData.append('description', postApiV1SightingsBody.description);
  }
  if (postApiV1SightingsBody.latitude !== undefined) {
    formData.append('latitude', postApiV1SightingsBody.latitude.toString());
  }
  if (postApiV1SightingsBody.longitude !== undefined) {
    formData.append('longitude', postApiV1SightingsBody.longitude.toString());
  }
  if (postApiV1SightingsBody.picture !== undefined) {
    formData.append('picture', postApiV1SightingsBody.picture);
  }

  return axios.default.post(
    `https://flowrspot-api.herokuapp.com/api/v1/sightings`,
    formData,
    options,
  );
};

export const getPostApiV1SightingsMutationFetcher = (options?: AxiosRequestConfig) => {
  return (_: string, { arg }: { arg: Arguments }): Promise<AxiosResponse<Sighting>> => {
    return postApiV1Sightings(arg as PostApiV1SightingsBody, options);
  };
};
export const getPostApiV1SightingsMutationKey = () =>
  `https://flowrspot-api.herokuapp.com/api/v1/sightings` as const;

export type PostApiV1SightingsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Sightings>>
>;
export type PostApiV1SightingsMutationError = AxiosError<unknown>;

/**
 * @summary create sighting
 */
export const usePostApiV1Sightings = <TError = AxiosError<unknown>>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof postApiV1Sightings>>,
    TError,
    string,
    Arguments,
    Awaited<ReturnType<typeof postApiV1Sightings>>
  > & { swrKey?: string };
  axios?: AxiosRequestConfig;
}) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getPostApiV1SightingsMutationKey();
  const swrFn = getPostApiV1SightingsMutationFetcher(axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary sighting info
 */
export const getApiV1SightingsId = (
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Sighting>> => {
  return axios.default.get(`https://flowrspot-api.herokuapp.com/api/v1/sightings/${id}`, options);
};

export const getGetApiV1SightingsIdKey = (id: number) =>
  [`https://flowrspot-api.herokuapp.com/api/v1/sightings/${id}`] as const;

export type GetApiV1SightingsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1SightingsId>>
>;
export type GetApiV1SightingsIdQueryError = AxiosError<unknown>;

/**
 * @summary sighting info
 */
export const useGetApiV1SightingsId = <TError = AxiosError<unknown>>(
  id: number,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getApiV1SightingsId>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!id;
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetApiV1SightingsIdKey(id) : null));
  const swrFn = () => getApiV1SightingsId(id, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, {
    ...swrOptions,
  });

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary update sighting
 */
export const putApiV1SightingsId = (
  id: number,
  putApiV1SightingsIdBody: PutApiV1SightingsIdBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Sighting>> => {
  return axios.default.put(
    `https://flowrspot-api.herokuapp.com/api/v1/sightings/${id}`,
    putApiV1SightingsIdBody,
    options,
  );
};

export const getPutApiV1SightingsIdMutationFetcher = (id: number, options?: AxiosRequestConfig) => {
  return (_: string, { arg }: { arg: Arguments }): Promise<AxiosResponse<Sighting>> => {
    return putApiV1SightingsId(id, arg as PutApiV1SightingsIdBody, options);
  };
};
export const getPutApiV1SightingsIdMutationKey = (id: number) =>
  `https://flowrspot-api.herokuapp.com/api/v1/sightings/${id}` as const;

export type PutApiV1SightingsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1SightingsId>>
>;
export type PutApiV1SightingsIdMutationError = AxiosError<unknown>;

/**
 * @summary update sighting
 */
export const usePutApiV1SightingsId = <TError = AxiosError<unknown>>(
  id: number,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof putApiV1SightingsId>>,
      TError,
      string,
      Arguments,
      Awaited<ReturnType<typeof putApiV1SightingsId>>
    > & { swrKey?: string };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getPutApiV1SightingsIdMutationKey(id);
  const swrFn = getPutApiV1SightingsIdMutationFetcher(id, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary delete sighting
 */
export const deleteApiV1SightingsId = (
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Sighting>> => {
  return axios.default.delete(
    `https://flowrspot-api.herokuapp.com/api/v1/sightings/${id}`,
    options,
  );
};

export const getDeleteApiV1SightingsIdMutationFetcher = (
  id: number,
  options?: AxiosRequestConfig,
) => {
  return (_: string, { arg }: { arg: Arguments }): Promise<AxiosResponse<Sighting>> => {
    return deleteApiV1SightingsId(id, options);
  };
};
export const getDeleteApiV1SightingsIdMutationKey = (id: number) =>
  `https://flowrspot-api.herokuapp.com/api/v1/sightings/${id}` as const;

export type DeleteApiV1SightingsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1SightingsId>>
>;
export type DeleteApiV1SightingsIdMutationError = AxiosError<unknown>;

/**
 * @summary delete sighting
 */
export const useDeleteApiV1SightingsId = <TError = AxiosError<unknown>>(
  id: number,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof deleteApiV1SightingsId>>,
      TError,
      string,
      Arguments,
      Awaited<ReturnType<typeof deleteApiV1SightingsId>>
    > & { swrKey?: string };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getDeleteApiV1SightingsIdMutationKey(id);
  const swrFn = getDeleteApiV1SightingsIdMutationFetcher(id, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary users sightings
 */
export const getApiV1UsersIdSightings = (
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<SightingList>> => {
  return axios.default.get(
    `https://flowrspot-api.herokuapp.com/api/v1/users/${id}/sightings`,
    options,
  );
};

export const getGetApiV1UsersIdSightingsKey = (id: number) =>
  [`https://flowrspot-api.herokuapp.com/api/v1/users/${id}/sightings`] as const;

export type GetApiV1UsersIdSightingsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1UsersIdSightings>>
>;
export type GetApiV1UsersIdSightingsQueryError = AxiosError<unknown>;

/**
 * @summary users sightings
 */
export const useGetApiV1UsersIdSightings = <TError = AxiosError<unknown>>(
  id: number,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getApiV1UsersIdSightings>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!id;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetApiV1UsersIdSightingsKey(id) : null));
  const swrFn = () => getApiV1UsersIdSightings(id, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, {
    ...swrOptions,
  });

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary info about me
 */
export const getApiV1UsersMe = (options?: AxiosRequestConfig): Promise<AxiosResponse<User>> => {
  return axios.default.get(`https://flowrspot-api.herokuapp.com/api/v1/users/me`, options);
};

export const getGetApiV1UsersMeKey = () =>
  [`https://flowrspot-api.herokuapp.com/api/v1/users/me`] as const;

export type GetApiV1UsersMeQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1UsersMe>>>;
export type GetApiV1UsersMeQueryError = AxiosError<unknown>;

/**
 * @summary info about me
 */
export const useGetApiV1UsersMe = <TError = AxiosError<unknown>>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof getApiV1UsersMe>>, TError> & {
    swrKey?: Key;
    enabled?: boolean;
  };
  axios?: AxiosRequestConfig;
}) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetApiV1UsersMeKey() : null));
  const swrFn = () => getApiV1UsersMe(axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, {
    ...swrOptions,
  });

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary update my user info
 */
export const putApiV1UsersMe = (
  putApiV1UsersMeBody: PutApiV1UsersMeBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<User>> => {
  return axios.default.put(
    `https://flowrspot-api.herokuapp.com/api/v1/users/me`,
    putApiV1UsersMeBody,
    options,
  );
};

export const getPutApiV1UsersMeMutationFetcher = (options?: AxiosRequestConfig) => {
  return (_: string, { arg }: { arg: Arguments }): Promise<AxiosResponse<User>> => {
    return putApiV1UsersMe(arg as PutApiV1UsersMeBody, options);
  };
};
export const getPutApiV1UsersMeMutationKey = () =>
  `https://flowrspot-api.herokuapp.com/api/v1/users/me` as const;

export type PutApiV1UsersMeMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1UsersMe>>
>;
export type PutApiV1UsersMeMutationError = AxiosError<unknown>;

/**
 * @summary update my user info
 */
export const usePutApiV1UsersMe = <TError = AxiosError<unknown>>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof putApiV1UsersMe>>,
    TError,
    string,
    Arguments,
    Awaited<ReturnType<typeof putApiV1UsersMe>>
  > & { swrKey?: string };
  axios?: AxiosRequestConfig;
}) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getPutApiV1UsersMeMutationKey();
  const swrFn = getPutApiV1UsersMeMutationFetcher(axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary return a fresh jst token back
 */
export const getApiV1UsersMeRefresh = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<AuthToken>> => {
  return axios.default.get(`https://flowrspot-api.herokuapp.com/api/v1/users/me/refresh`, options);
};

export const getGetApiV1UsersMeRefreshKey = () =>
  [`https://flowrspot-api.herokuapp.com/api/v1/users/me/refresh`] as const;

export type GetApiV1UsersMeRefreshQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1UsersMeRefresh>>
>;
export type GetApiV1UsersMeRefreshQueryError = AxiosError<unknown>;

/**
 * @summary return a fresh jst token back
 */
export const useGetApiV1UsersMeRefresh = <TError = AxiosError<unknown>>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof getApiV1UsersMeRefresh>>, TError> & {
    swrKey?: Key;
    enabled?: boolean;
  };
  axios?: AxiosRequestConfig;
}) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetApiV1UsersMeRefreshKey() : null));
  const swrFn = () => getApiV1UsersMeRefresh(axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, {
    ...swrOptions,
  });

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary show user info
 */
export const getApiV1UsersId = (
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<User>> => {
  return axios.default.get(`https://flowrspot-api.herokuapp.com/api/v1/users/${id}`, options);
};

export const getGetApiV1UsersIdKey = (id: number) =>
  [`https://flowrspot-api.herokuapp.com/api/v1/users/${id}`] as const;

export type GetApiV1UsersIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1UsersId>>>;
export type GetApiV1UsersIdQueryError = AxiosError<unknown>;

/**
 * @summary show user info
 */
export const useGetApiV1UsersId = <TError = AxiosError<unknown>>(
  id: number,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getApiV1UsersId>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!id;
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetApiV1UsersIdKey(id) : null));
  const swrFn = () => getApiV1UsersId(id, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, {
    ...swrOptions,
  });

  return {
    swrKey,
    ...query,
  };
};
