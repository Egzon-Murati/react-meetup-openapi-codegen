/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * API V1
 * OpenAPI spec version: v1
 */
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { useMutation, useQuery } from '@tanstack/react-query';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import * as axios from 'axios';
import type {
  AuthToken,
  AuthTokenError,
  Comment,
  CommentList,
  Favorite,
  FavoriteList,
  Flower,
  FlowerList,
  GetApiV1FlowersFavoritesParams,
  GetApiV1FlowersParams,
  GetApiV1FlowersRandomParams,
  GetApiV1FlowersSearchParams,
  GetApiV1SightingsParams,
  GetApiV1SightingsSightingIdCommentsParams,
  GetApiV1SightingsSightingIdLikesParams,
  Like,
  LikeList,
  PostApiV1FlowersBody,
  PostApiV1SightingsBody,
  PostApiV1SightingsSightingIdCommentsBody,
  PostApiV1UsersLoginBody,
  PostApiV1UsersRegisterBody,
  PutApiV1SightingsIdBody,
  PutApiV1UsersMeBody,
  Sighting,
  SightingList,
  User,
} from './generated-api.schemas';

/**
 * @summary shows my favorite flovers
 */
export const getApiV1FlowersFavorites = (
  params?: GetApiV1FlowersFavoritesParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<FavoriteList>> => {
  return axios.default.get(`https://flowrspot-api.herokuapp.com/api/v1/flowers/favorites`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetApiV1FlowersFavoritesQueryKey = (params?: GetApiV1FlowersFavoritesParams) => {
  return [
    `https://flowrspot-api.herokuapp.com/api/v1/flowers/favorites`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1FlowersFavoritesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1FlowersFavorites>>,
  TError = AxiosError<unknown>,
>(
  params?: GetApiV1FlowersFavoritesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getApiV1FlowersFavorites>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1FlowersFavoritesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1FlowersFavorites>>> = ({
    signal,
  }) => getApiV1FlowersFavorites(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1FlowersFavorites>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1FlowersFavoritesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1FlowersFavorites>>
>;
export type GetApiV1FlowersFavoritesQueryError = AxiosError<unknown>;

/**
 * @summary shows my favorite flovers
 */
export const useGetApiV1FlowersFavorites = <
  TData = Awaited<ReturnType<typeof getApiV1FlowersFavorites>>,
  TError = AxiosError<unknown>,
>(
  params?: GetApiV1FlowersFavoritesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getApiV1FlowersFavorites>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1FlowersFavoritesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary mark that flower as my favorite
 */
export const postApiV1FlowersFlowerIdFavorites = (
  flowerId: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Favorite>> => {
  return axios.default.post(
    `https://flowrspot-api.herokuapp.com/api/v1/flowers/${flowerId}/favorites`,
    undefined,
    options,
  );
};

export const getPostApiV1FlowersFlowerIdFavoritesMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1FlowersFlowerIdFavorites>>,
    TError,
    { flowerId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1FlowersFlowerIdFavorites>>,
  TError,
  { flowerId: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1FlowersFlowerIdFavorites>>,
    { flowerId: number }
  > = (props) => {
    const { flowerId } = props ?? {};

    return postApiV1FlowersFlowerIdFavorites(flowerId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1FlowersFlowerIdFavoritesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1FlowersFlowerIdFavorites>>
>;

export type PostApiV1FlowersFlowerIdFavoritesMutationError = AxiosError<unknown>;

/**
 * @summary mark that flower as my favorite
 */
export const usePostApiV1FlowersFlowerIdFavorites = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1FlowersFlowerIdFavorites>>,
    TError,
    { flowerId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPostApiV1FlowersFlowerIdFavoritesMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary remove that flower from my favorites
 */
export const deleteApiV1FlowersFlowerIdFavoritesId = (
  flowerId: number,
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Favorite>> => {
  return axios.default.delete(
    `https://flowrspot-api.herokuapp.com/api/v1/flowers/${flowerId}/favorites/${id}`,
    options,
  );
};

export const getDeleteApiV1FlowersFlowerIdFavoritesIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1FlowersFlowerIdFavoritesId>>,
    TError,
    { flowerId: number; id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1FlowersFlowerIdFavoritesId>>,
  TError,
  { flowerId: number; id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1FlowersFlowerIdFavoritesId>>,
    { flowerId: number; id: number }
  > = (props) => {
    const { flowerId, id } = props ?? {};

    return deleteApiV1FlowersFlowerIdFavoritesId(flowerId, id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1FlowersFlowerIdFavoritesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1FlowersFlowerIdFavoritesId>>
>;

export type DeleteApiV1FlowersFlowerIdFavoritesIdMutationError = AxiosError<unknown>;

/**
 * @summary remove that flower from my favorites
 */
export const useDeleteApiV1FlowersFlowerIdFavoritesId = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1FlowersFlowerIdFavoritesId>>,
    TError,
    { flowerId: number; id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getDeleteApiV1FlowersFlowerIdFavoritesIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary flower sightings
 */
export const getApiV1FlowersIdSightings = (
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<SightingList>> => {
  return axios.default.get(
    `https://flowrspot-api.herokuapp.com/api/v1/flowers/${id}/sightings`,
    options,
  );
};

export const getGetApiV1FlowersIdSightingsQueryKey = (id: number) => {
  return [`https://flowrspot-api.herokuapp.com/api/v1/flowers/${id}/sightings`] as const;
};

export const getGetApiV1FlowersIdSightingsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1FlowersIdSightings>>,
  TError = AxiosError<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getApiV1FlowersIdSightings>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1FlowersIdSightingsQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1FlowersIdSightings>>> = ({
    signal,
  }) => getApiV1FlowersIdSightings(id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1FlowersIdSightings>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1FlowersIdSightingsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1FlowersIdSightings>>
>;
export type GetApiV1FlowersIdSightingsQueryError = AxiosError<unknown>;

/**
 * @summary flower sightings
 */
export const useGetApiV1FlowersIdSightings = <
  TData = Awaited<ReturnType<typeof getApiV1FlowersIdSightings>>,
  TError = AxiosError<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getApiV1FlowersIdSightings>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1FlowersIdSightingsQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary List flowers
 */
export const getApiV1Flowers = (
  params?: GetApiV1FlowersParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<FlowerList>> => {
  return axios.default.get(`https://flowrspot-api.herokuapp.com/api/v1/flowers`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetApiV1FlowersQueryKey = (params?: GetApiV1FlowersParams) => {
  return [
    `https://flowrspot-api.herokuapp.com/api/v1/flowers`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1FlowersQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Flowers>>,
  TError = AxiosError<unknown>,
>(
  params?: GetApiV1FlowersParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getApiV1Flowers>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1FlowersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Flowers>>> = ({ signal }) =>
    getApiV1Flowers(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Flowers>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1FlowersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Flowers>>>;
export type GetApiV1FlowersQueryError = AxiosError<unknown>;

/**
 * @summary List flowers
 */
export const useGetApiV1Flowers = <
  TData = Awaited<ReturnType<typeof getApiV1Flowers>>,
  TError = AxiosError<unknown>,
>(
  params?: GetApiV1FlowersParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getApiV1Flowers>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1FlowersQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Create flower
 */
export const postApiV1Flowers = (
  postApiV1FlowersBody: PostApiV1FlowersBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Flower>> => {
  const formData = new FormData();
  if (postApiV1FlowersBody.name !== undefined) {
    formData.append('name', postApiV1FlowersBody.name);
  }
  if (postApiV1FlowersBody.latin_name !== undefined) {
    formData.append('latin_name', postApiV1FlowersBody.latin_name);
  }
  if (postApiV1FlowersBody.description !== undefined) {
    formData.append('description', postApiV1FlowersBody.description);
  }
  if (postApiV1FlowersBody.features !== undefined) {
    formData.append('features', postApiV1FlowersBody.features);
  }
  if (postApiV1FlowersBody.profile_picture !== undefined) {
    formData.append('profile_picture', postApiV1FlowersBody.profile_picture);
  }

  return axios.default.post(
    `https://flowrspot-api.herokuapp.com/api/v1/flowers`,
    formData,
    options,
  );
};

export const getPostApiV1FlowersMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Flowers>>,
    TError,
    { data: PostApiV1FlowersBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Flowers>>,
  TError,
  { data: PostApiV1FlowersBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Flowers>>,
    { data: PostApiV1FlowersBody }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Flowers(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1FlowersMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Flowers>>
>;
export type PostApiV1FlowersMutationBody = PostApiV1FlowersBody;
export type PostApiV1FlowersMutationError = AxiosError<unknown>;

/**
 * @summary Create flower
 */
export const usePostApiV1Flowers = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Flowers>>,
    TError,
    { data: PostApiV1FlowersBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPostApiV1FlowersMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary List of random flowers
 */
export const getApiV1FlowersRandom = (
  params?: GetApiV1FlowersRandomParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<FlowerList>> => {
  return axios.default.get(`https://flowrspot-api.herokuapp.com/api/v1/flowers/random`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetApiV1FlowersRandomQueryKey = (params?: GetApiV1FlowersRandomParams) => {
  return [
    `https://flowrspot-api.herokuapp.com/api/v1/flowers/random`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1FlowersRandomQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1FlowersRandom>>,
  TError = AxiosError<unknown>,
>(
  params?: GetApiV1FlowersRandomParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getApiV1FlowersRandom>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1FlowersRandomQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1FlowersRandom>>> = ({ signal }) =>
    getApiV1FlowersRandom(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1FlowersRandom>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1FlowersRandomQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1FlowersRandom>>
>;
export type GetApiV1FlowersRandomQueryError = AxiosError<unknown>;

/**
 * @summary List of random flowers
 */
export const useGetApiV1FlowersRandom = <
  TData = Awaited<ReturnType<typeof getApiV1FlowersRandom>>,
  TError = AxiosError<unknown>,
>(
  params?: GetApiV1FlowersRandomParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getApiV1FlowersRandom>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1FlowersRandomQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Flowers matching search results
 */
export const getApiV1FlowersSearch = (
  params: GetApiV1FlowersSearchParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<FlowerList>> => {
  return axios.default.get(`https://flowrspot-api.herokuapp.com/api/v1/flowers/search`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetApiV1FlowersSearchQueryKey = (params: GetApiV1FlowersSearchParams) => {
  return [
    `https://flowrspot-api.herokuapp.com/api/v1/flowers/search`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1FlowersSearchQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1FlowersSearch>>,
  TError = AxiosError<unknown>,
>(
  params: GetApiV1FlowersSearchParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getApiV1FlowersSearch>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1FlowersSearchQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1FlowersSearch>>> = ({ signal }) =>
    getApiV1FlowersSearch(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1FlowersSearch>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1FlowersSearchQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1FlowersSearch>>
>;
export type GetApiV1FlowersSearchQueryError = AxiosError<unknown>;

/**
 * @summary Flowers matching search results
 */
export const useGetApiV1FlowersSearch = <
  TData = Awaited<ReturnType<typeof getApiV1FlowersSearch>>,
  TError = AxiosError<unknown>,
>(
  params: GetApiV1FlowersSearchParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getApiV1FlowersSearch>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1FlowersSearchQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Flower detail
 */
export const getApiV1FlowersId = (
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Flower>> => {
  return axios.default.get(`https://flowrspot-api.herokuapp.com/api/v1/flowers/${id}`, options);
};

export const getGetApiV1FlowersIdQueryKey = (id: number) => {
  return [`https://flowrspot-api.herokuapp.com/api/v1/flowers/${id}`] as const;
};

export const getGetApiV1FlowersIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1FlowersId>>,
  TError = AxiosError<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getApiV1FlowersId>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1FlowersIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1FlowersId>>> = ({ signal }) =>
    getApiV1FlowersId(id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1FlowersId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1FlowersIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1FlowersId>>
>;
export type GetApiV1FlowersIdQueryError = AxiosError<unknown>;

/**
 * @summary Flower detail
 */
export const useGetApiV1FlowersId = <
  TData = Awaited<ReturnType<typeof getApiV1FlowersId>>,
  TError = AxiosError<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getApiV1FlowersId>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1FlowersIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary register user and get token back
 */
export const postApiV1UsersRegister = (
  postApiV1UsersRegisterBody: PostApiV1UsersRegisterBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<AuthToken>> => {
  return axios.default.post(
    `https://flowrspot-api.herokuapp.com/api/v1/users/register`,
    postApiV1UsersRegisterBody,
    options,
  );
};

export const getPostApiV1UsersRegisterMutationOptions = <
  TError = AxiosError<AuthTokenError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1UsersRegister>>,
    TError,
    { data: PostApiV1UsersRegisterBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1UsersRegister>>,
  TError,
  { data: PostApiV1UsersRegisterBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1UsersRegister>>,
    { data: PostApiV1UsersRegisterBody }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1UsersRegister(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1UsersRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1UsersRegister>>
>;
export type PostApiV1UsersRegisterMutationBody = PostApiV1UsersRegisterBody;
export type PostApiV1UsersRegisterMutationError = AxiosError<AuthTokenError>;

/**
 * @summary register user and get token back
 */
export const usePostApiV1UsersRegister = <
  TError = AxiosError<AuthTokenError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1UsersRegister>>,
    TError,
    { data: PostApiV1UsersRegisterBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPostApiV1UsersRegisterMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary login user and get token back
 */
export const postApiV1UsersLogin = (
  postApiV1UsersLoginBody: PostApiV1UsersLoginBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<AuthToken>> => {
  return axios.default.post(
    `https://flowrspot-api.herokuapp.com/api/v1/users/login`,
    postApiV1UsersLoginBody,
    options,
  );
};

export const getPostApiV1UsersLoginMutationOptions = <
  TError = AxiosError<AuthTokenError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1UsersLogin>>,
    TError,
    { data: PostApiV1UsersLoginBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1UsersLogin>>,
  TError,
  { data: PostApiV1UsersLoginBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1UsersLogin>>,
    { data: PostApiV1UsersLoginBody }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1UsersLogin(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1UsersLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1UsersLogin>>
>;
export type PostApiV1UsersLoginMutationBody = PostApiV1UsersLoginBody;
export type PostApiV1UsersLoginMutationError = AxiosError<AuthTokenError>;

/**
 * @summary login user and get token back
 */
export const usePostApiV1UsersLogin = <
  TError = AxiosError<AuthTokenError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1UsersLogin>>,
    TError,
    { data: PostApiV1UsersLoginBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPostApiV1UsersLoginMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary remove the comment
 */
export const deleteApiV1SightingsSightingIdCommentsId = (
  sightingId: number,
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Comment>> => {
  return axios.default.delete(
    `https://flowrspot-api.herokuapp.com/api/v1/sightings/${sightingId}/comments/${id}`,
    options,
  );
};

export const getDeleteApiV1SightingsSightingIdCommentsIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1SightingsSightingIdCommentsId>>,
    TError,
    { sightingId: number; id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1SightingsSightingIdCommentsId>>,
  TError,
  { sightingId: number; id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1SightingsSightingIdCommentsId>>,
    { sightingId: number; id: number }
  > = (props) => {
    const { sightingId, id } = props ?? {};

    return deleteApiV1SightingsSightingIdCommentsId(sightingId, id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1SightingsSightingIdCommentsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1SightingsSightingIdCommentsId>>
>;

export type DeleteApiV1SightingsSightingIdCommentsIdMutationError = AxiosError<unknown>;

/**
 * @summary remove the comment
 */
export const useDeleteApiV1SightingsSightingIdCommentsId = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1SightingsSightingIdCommentsId>>,
    TError,
    { sightingId: number; id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getDeleteApiV1SightingsSightingIdCommentsIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary get comments
 */
export const getApiV1SightingsSightingIdComments = (
  sightingId: number,
  params?: GetApiV1SightingsSightingIdCommentsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<CommentList>> => {
  return axios.default.get(
    `https://flowrspot-api.herokuapp.com/api/v1/sightings/${sightingId}/comments`,
    {
      ...options,
      params: { ...params, ...options?.params },
    },
  );
};

export const getGetApiV1SightingsSightingIdCommentsQueryKey = (
  sightingId: number,
  params?: GetApiV1SightingsSightingIdCommentsParams,
) => {
  return [
    `https://flowrspot-api.herokuapp.com/api/v1/sightings/${sightingId}/comments`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1SightingsSightingIdCommentsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1SightingsSightingIdComments>>,
  TError = AxiosError<unknown>,
>(
  sightingId: number,
  params?: GetApiV1SightingsSightingIdCommentsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SightingsSightingIdComments>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1SightingsSightingIdCommentsQueryKey(sightingId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1SightingsSightingIdComments>>> = ({
    signal,
  }) => getApiV1SightingsSightingIdComments(sightingId, params, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!sightingId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1SightingsSightingIdComments>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1SightingsSightingIdCommentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1SightingsSightingIdComments>>
>;
export type GetApiV1SightingsSightingIdCommentsQueryError = AxiosError<unknown>;

/**
 * @summary get comments
 */
export const useGetApiV1SightingsSightingIdComments = <
  TData = Awaited<ReturnType<typeof getApiV1SightingsSightingIdComments>>,
  TError = AxiosError<unknown>,
>(
  sightingId: number,
  params?: GetApiV1SightingsSightingIdCommentsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SightingsSightingIdComments>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1SightingsSightingIdCommentsQueryOptions(
    sightingId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary create a comment
 */
export const postApiV1SightingsSightingIdComments = (
  sightingId: number,
  postApiV1SightingsSightingIdCommentsBody: PostApiV1SightingsSightingIdCommentsBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Comment>> => {
  return axios.default.post(
    `https://flowrspot-api.herokuapp.com/api/v1/sightings/${sightingId}/comments`,
    postApiV1SightingsSightingIdCommentsBody,
    options,
  );
};

export const getPostApiV1SightingsSightingIdCommentsMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1SightingsSightingIdComments>>,
    TError,
    { sightingId: number; data: PostApiV1SightingsSightingIdCommentsBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1SightingsSightingIdComments>>,
  TError,
  { sightingId: number; data: PostApiV1SightingsSightingIdCommentsBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1SightingsSightingIdComments>>,
    { sightingId: number; data: PostApiV1SightingsSightingIdCommentsBody }
  > = (props) => {
    const { sightingId, data } = props ?? {};

    return postApiV1SightingsSightingIdComments(sightingId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1SightingsSightingIdCommentsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1SightingsSightingIdComments>>
>;
export type PostApiV1SightingsSightingIdCommentsMutationBody =
  PostApiV1SightingsSightingIdCommentsBody;
export type PostApiV1SightingsSightingIdCommentsMutationError = AxiosError<unknown>;

/**
 * @summary create a comment
 */
export const usePostApiV1SightingsSightingIdComments = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1SightingsSightingIdComments>>,
    TError,
    { sightingId: number; data: PostApiV1SightingsSightingIdCommentsBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPostApiV1SightingsSightingIdCommentsMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary remove the like
 */
export const deleteApiV1SightingsSightingIdLikes = (
  sightingId: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Like>> => {
  return axios.default.delete(
    `https://flowrspot-api.herokuapp.com/api/v1/sightings/${sightingId}/likes`,
    options,
  );
};

export const getDeleteApiV1SightingsSightingIdLikesMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1SightingsSightingIdLikes>>,
    TError,
    { sightingId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1SightingsSightingIdLikes>>,
  TError,
  { sightingId: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1SightingsSightingIdLikes>>,
    { sightingId: number }
  > = (props) => {
    const { sightingId } = props ?? {};

    return deleteApiV1SightingsSightingIdLikes(sightingId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1SightingsSightingIdLikesMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1SightingsSightingIdLikes>>
>;

export type DeleteApiV1SightingsSightingIdLikesMutationError = AxiosError<unknown>;

/**
 * @summary remove the like
 */
export const useDeleteApiV1SightingsSightingIdLikes = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1SightingsSightingIdLikes>>,
    TError,
    { sightingId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getDeleteApiV1SightingsSightingIdLikesMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary get likes
 */
export const getApiV1SightingsSightingIdLikes = (
  sightingId: number,
  params?: GetApiV1SightingsSightingIdLikesParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<LikeList>> => {
  return axios.default.get(
    `https://flowrspot-api.herokuapp.com/api/v1/sightings/${sightingId}/likes`,
    {
      ...options,
      params: { ...params, ...options?.params },
    },
  );
};

export const getGetApiV1SightingsSightingIdLikesQueryKey = (
  sightingId: number,
  params?: GetApiV1SightingsSightingIdLikesParams,
) => {
  return [
    `https://flowrspot-api.herokuapp.com/api/v1/sightings/${sightingId}/likes`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1SightingsSightingIdLikesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1SightingsSightingIdLikes>>,
  TError = AxiosError<unknown>,
>(
  sightingId: number,
  params?: GetApiV1SightingsSightingIdLikesParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SightingsSightingIdLikes>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1SightingsSightingIdLikesQueryKey(sightingId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1SightingsSightingIdLikes>>> = ({
    signal,
  }) => getApiV1SightingsSightingIdLikes(sightingId, params, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!sightingId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1SightingsSightingIdLikes>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1SightingsSightingIdLikesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1SightingsSightingIdLikes>>
>;
export type GetApiV1SightingsSightingIdLikesQueryError = AxiosError<unknown>;

/**
 * @summary get likes
 */
export const useGetApiV1SightingsSightingIdLikes = <
  TData = Awaited<ReturnType<typeof getApiV1SightingsSightingIdLikes>>,
  TError = AxiosError<unknown>,
>(
  sightingId: number,
  params?: GetApiV1SightingsSightingIdLikesParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SightingsSightingIdLikes>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1SightingsSightingIdLikesQueryOptions(sightingId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary create a like
 */
export const postApiV1SightingsSightingIdLikes = (
  sightingId: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Like>> => {
  return axios.default.post(
    `https://flowrspot-api.herokuapp.com/api/v1/sightings/${sightingId}/likes`,
    undefined,
    options,
  );
};

export const getPostApiV1SightingsSightingIdLikesMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1SightingsSightingIdLikes>>,
    TError,
    { sightingId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1SightingsSightingIdLikes>>,
  TError,
  { sightingId: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1SightingsSightingIdLikes>>,
    { sightingId: number }
  > = (props) => {
    const { sightingId } = props ?? {};

    return postApiV1SightingsSightingIdLikes(sightingId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1SightingsSightingIdLikesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1SightingsSightingIdLikes>>
>;

export type PostApiV1SightingsSightingIdLikesMutationError = AxiosError<unknown>;

/**
 * @summary create a like
 */
export const usePostApiV1SightingsSightingIdLikes = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1SightingsSightingIdLikes>>,
    TError,
    { sightingId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPostApiV1SightingsSightingIdLikesMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary sightings
 */
export const getApiV1Sightings = (
  params?: GetApiV1SightingsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<SightingList>> => {
  return axios.default.get(`https://flowrspot-api.herokuapp.com/api/v1/sightings`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetApiV1SightingsQueryKey = (params?: GetApiV1SightingsParams) => {
  return [
    `https://flowrspot-api.herokuapp.com/api/v1/sightings`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1SightingsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Sightings>>,
  TError = AxiosError<unknown>,
>(
  params?: GetApiV1SightingsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getApiV1Sightings>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1SightingsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Sightings>>> = ({ signal }) =>
    getApiV1Sightings(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Sightings>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1SightingsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Sightings>>
>;
export type GetApiV1SightingsQueryError = AxiosError<unknown>;

/**
 * @summary sightings
 */
export const useGetApiV1Sightings = <
  TData = Awaited<ReturnType<typeof getApiV1Sightings>>,
  TError = AxiosError<unknown>,
>(
  params?: GetApiV1SightingsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getApiV1Sightings>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1SightingsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary create sighting
 */
export const postApiV1Sightings = (
  postApiV1SightingsBody: PostApiV1SightingsBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Sighting>> => {
  const formData = new FormData();
  if (postApiV1SightingsBody.flower_id !== undefined) {
    formData.append('flower_id', postApiV1SightingsBody.flower_id.toString());
  }
  if (postApiV1SightingsBody.name !== undefined) {
    formData.append('name', postApiV1SightingsBody.name);
  }
  if (postApiV1SightingsBody.description !== undefined) {
    formData.append('description', postApiV1SightingsBody.description);
  }
  if (postApiV1SightingsBody.latitude !== undefined) {
    formData.append('latitude', postApiV1SightingsBody.latitude.toString());
  }
  if (postApiV1SightingsBody.longitude !== undefined) {
    formData.append('longitude', postApiV1SightingsBody.longitude.toString());
  }
  if (postApiV1SightingsBody.picture !== undefined) {
    formData.append('picture', postApiV1SightingsBody.picture);
  }

  return axios.default.post(
    `https://flowrspot-api.herokuapp.com/api/v1/sightings`,
    formData,
    options,
  );
};

export const getPostApiV1SightingsMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Sightings>>,
    TError,
    { data: PostApiV1SightingsBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Sightings>>,
  TError,
  { data: PostApiV1SightingsBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Sightings>>,
    { data: PostApiV1SightingsBody }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Sightings(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1SightingsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Sightings>>
>;
export type PostApiV1SightingsMutationBody = PostApiV1SightingsBody;
export type PostApiV1SightingsMutationError = AxiosError<unknown>;

/**
 * @summary create sighting
 */
export const usePostApiV1Sightings = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Sightings>>,
    TError,
    { data: PostApiV1SightingsBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPostApiV1SightingsMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary sighting info
 */
export const getApiV1SightingsId = (
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Sighting>> => {
  return axios.default.get(`https://flowrspot-api.herokuapp.com/api/v1/sightings/${id}`, options);
};

export const getGetApiV1SightingsIdQueryKey = (id: number) => {
  return [`https://flowrspot-api.herokuapp.com/api/v1/sightings/${id}`] as const;
};

export const getGetApiV1SightingsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1SightingsId>>,
  TError = AxiosError<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getApiV1SightingsId>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1SightingsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1SightingsId>>> = ({ signal }) =>
    getApiV1SightingsId(id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1SightingsId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1SightingsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1SightingsId>>
>;
export type GetApiV1SightingsIdQueryError = AxiosError<unknown>;

/**
 * @summary sighting info
 */
export const useGetApiV1SightingsId = <
  TData = Awaited<ReturnType<typeof getApiV1SightingsId>>,
  TError = AxiosError<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getApiV1SightingsId>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1SightingsIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary update sighting
 */
export const putApiV1SightingsId = (
  id: number,
  putApiV1SightingsIdBody: PutApiV1SightingsIdBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Sighting>> => {
  return axios.default.put(
    `https://flowrspot-api.herokuapp.com/api/v1/sightings/${id}`,
    putApiV1SightingsIdBody,
    options,
  );
};

export const getPutApiV1SightingsIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1SightingsId>>,
    TError,
    { id: number; data: PutApiV1SightingsIdBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1SightingsId>>,
  TError,
  { id: number; data: PutApiV1SightingsIdBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1SightingsId>>,
    { id: number; data: PutApiV1SightingsIdBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1SightingsId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1SightingsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1SightingsId>>
>;
export type PutApiV1SightingsIdMutationBody = PutApiV1SightingsIdBody;
export type PutApiV1SightingsIdMutationError = AxiosError<unknown>;

/**
 * @summary update sighting
 */
export const usePutApiV1SightingsId = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1SightingsId>>,
    TError,
    { id: number; data: PutApiV1SightingsIdBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPutApiV1SightingsIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary delete sighting
 */
export const deleteApiV1SightingsId = (
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Sighting>> => {
  return axios.default.delete(
    `https://flowrspot-api.herokuapp.com/api/v1/sightings/${id}`,
    options,
  );
};

export const getDeleteApiV1SightingsIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1SightingsId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1SightingsId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1SightingsId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1SightingsId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1SightingsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1SightingsId>>
>;

export type DeleteApiV1SightingsIdMutationError = AxiosError<unknown>;

/**
 * @summary delete sighting
 */
export const useDeleteApiV1SightingsId = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1SightingsId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getDeleteApiV1SightingsIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary users sightings
 */
export const getApiV1UsersIdSightings = (
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<SightingList>> => {
  return axios.default.get(
    `https://flowrspot-api.herokuapp.com/api/v1/users/${id}/sightings`,
    options,
  );
};

export const getGetApiV1UsersIdSightingsQueryKey = (id: number) => {
  return [`https://flowrspot-api.herokuapp.com/api/v1/users/${id}/sightings`] as const;
};

export const getGetApiV1UsersIdSightingsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1UsersIdSightings>>,
  TError = AxiosError<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersIdSightings>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1UsersIdSightingsQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1UsersIdSightings>>> = ({
    signal,
  }) => getApiV1UsersIdSightings(id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1UsersIdSightings>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1UsersIdSightingsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1UsersIdSightings>>
>;
export type GetApiV1UsersIdSightingsQueryError = AxiosError<unknown>;

/**
 * @summary users sightings
 */
export const useGetApiV1UsersIdSightings = <
  TData = Awaited<ReturnType<typeof getApiV1UsersIdSightings>>,
  TError = AxiosError<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersIdSightings>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1UsersIdSightingsQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary info about me
 */
export const getApiV1UsersMe = (options?: AxiosRequestConfig): Promise<AxiosResponse<User>> => {
  return axios.default.get(`https://flowrspot-api.herokuapp.com/api/v1/users/me`, options);
};

export const getGetApiV1UsersMeQueryKey = () => {
  return [`https://flowrspot-api.herokuapp.com/api/v1/users/me`] as const;
};

export const getGetApiV1UsersMeQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1UsersMe>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersMe>>, TError, TData>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1UsersMeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1UsersMe>>> = ({ signal }) =>
    getApiV1UsersMe({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1UsersMe>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1UsersMeQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1UsersMe>>>;
export type GetApiV1UsersMeQueryError = AxiosError<unknown>;

/**
 * @summary info about me
 */
export const useGetApiV1UsersMe = <
  TData = Awaited<ReturnType<typeof getApiV1UsersMe>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersMe>>, TError, TData>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1UsersMeQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary update my user info
 */
export const putApiV1UsersMe = (
  putApiV1UsersMeBody: PutApiV1UsersMeBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<User>> => {
  return axios.default.put(
    `https://flowrspot-api.herokuapp.com/api/v1/users/me`,
    putApiV1UsersMeBody,
    options,
  );
};

export const getPutApiV1UsersMeMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1UsersMe>>,
    TError,
    { data: PutApiV1UsersMeBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1UsersMe>>,
  TError,
  { data: PutApiV1UsersMeBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1UsersMe>>,
    { data: PutApiV1UsersMeBody }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV1UsersMe(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1UsersMeMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1UsersMe>>
>;
export type PutApiV1UsersMeMutationBody = PutApiV1UsersMeBody;
export type PutApiV1UsersMeMutationError = AxiosError<unknown>;

/**
 * @summary update my user info
 */
export const usePutApiV1UsersMe = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1UsersMe>>,
    TError,
    { data: PutApiV1UsersMeBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPutApiV1UsersMeMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary return a fresh jst token back
 */
export const getApiV1UsersMeRefresh = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<AuthToken>> => {
  return axios.default.get(`https://flowrspot-api.herokuapp.com/api/v1/users/me/refresh`, options);
};

export const getGetApiV1UsersMeRefreshQueryKey = () => {
  return [`https://flowrspot-api.herokuapp.com/api/v1/users/me/refresh`] as const;
};

export const getGetApiV1UsersMeRefreshQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1UsersMeRefresh>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersMeRefresh>>, TError, TData>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1UsersMeRefreshQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1UsersMeRefresh>>> = ({ signal }) =>
    getApiV1UsersMeRefresh({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1UsersMeRefresh>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1UsersMeRefreshQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1UsersMeRefresh>>
>;
export type GetApiV1UsersMeRefreshQueryError = AxiosError<unknown>;

/**
 * @summary return a fresh jst token back
 */
export const useGetApiV1UsersMeRefresh = <
  TData = Awaited<ReturnType<typeof getApiV1UsersMeRefresh>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersMeRefresh>>, TError, TData>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1UsersMeRefreshQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary show user info
 */
export const getApiV1UsersId = (
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<User>> => {
  return axios.default.get(`https://flowrspot-api.herokuapp.com/api/v1/users/${id}`, options);
};

export const getGetApiV1UsersIdQueryKey = (id: number) => {
  return [`https://flowrspot-api.herokuapp.com/api/v1/users/${id}`] as const;
};

export const getGetApiV1UsersIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1UsersId>>,
  TError = AxiosError<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersId>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1UsersIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1UsersId>>> = ({ signal }) =>
    getApiV1UsersId(id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1UsersId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1UsersIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1UsersId>>>;
export type GetApiV1UsersIdQueryError = AxiosError<unknown>;

/**
 * @summary show user info
 */
export const useGetApiV1UsersId = <
  TData = Awaited<ReturnType<typeof getApiV1UsersId>>,
  TError = AxiosError<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersId>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1UsersIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
