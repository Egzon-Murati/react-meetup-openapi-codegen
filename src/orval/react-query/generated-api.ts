/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * JSON Placeholder API
 * See https://jsonplaceholder.typicode.com/
 * OpenAPI spec version: 1.0.0
 */
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { useQuery } from '@tanstack/react-query';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import * as axios from 'axios';
import type { Post, PostsList } from './generated-api.schemas';

/**
 * Returns all posts
 */
export const getPosts = (options?: AxiosRequestConfig): Promise<AxiosResponse<PostsList>> => {
  return axios.default.get(`https://flowrspot-api.herokuapp.com/posts`, options);
};

export const getGetPostsQueryKey = () => {
  return [`https://flowrspot-api.herokuapp.com/posts`] as const;
};

export const getGetPostsQueryOptions = <
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPostsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPosts>>> = ({ signal }) =>
    getPosts({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPosts>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetPostsQueryResult = NonNullable<Awaited<ReturnType<typeof getPosts>>>;
export type GetPostsQueryError = AxiosError<unknown>;

export const useGetPosts = <
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPostsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Returns a post by id
 */
export const getPost = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Post>> => {
  return axios.default.get(`https://flowrspot-api.herokuapp.com/posts/${id}`, options);
};

export const getGetPostQueryKey = (id: number) => {
  return [`https://flowrspot-api.herokuapp.com/posts/${id}`] as const;
};

export const getGetPostQueryOptions = <
  TData = Awaited<ReturnType<typeof getPost>>,
  TError = AxiosError<void>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getPost>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPostQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPost>>> = ({ signal }) =>
    getPost(id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPost>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetPostQueryResult = NonNullable<Awaited<ReturnType<typeof getPost>>>;
export type GetPostQueryError = AxiosError<void>;

export const useGetPost = <TData = Awaited<ReturnType<typeof getPost>>, TError = AxiosError<void>>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getPost>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPostQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
